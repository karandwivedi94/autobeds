import PostgrestQueryBuilder from './PostgrestQueryBuilder';
import PostgrestFilterBuilder from './PostgrestFilterBuilder';
import { Fetch, GenericSchema } from './types';
export default class PostgrestClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, Schema extends GenericSchema = Database[SchemaName] extends GenericSchema ? Database[SchemaName] : any> {
    url: string;
    headers: Record<string, string>;
    schema?: SchemaName;
    fetch?: Fetch;
    /**
     * Creates a PostgREST client.
     *
     * @param url  URL of the PostgREST endpoint.
     * @param headers  Custom headers.
     * @param schema  Postgres schema to switch to.
     */
    constructor(url: string, { headers, schema, fetch, }?: {
        headers?: Record<string, string>;
        schema?: SchemaName;
        fetch?: Fetch;
    });
    /**
     * Perform a table operation.
     *
     * @param table  The table name to operate on.
     */
    from<TableName extends string & keyof Schema['Tables'], Table extends Schema['Tables'][TableName]>(table: TableName): PostgrestQueryBuilder<Table>;
    from(table: string): PostgrestQueryBuilder<any>;
    /**
     * Perform a function call.
     *
     * @param fn  The function name to call.
     * @param args  The parameters to pass to the function call.
     * @param options  Named parameters.
     */
    rpc<FunctionName extends string & keyof Schema['Functions'], Function_ extends Schema['Functions'][FunctionName]>(fn: FunctionName, args?: Function_['Args'], { head, count, }?: {
        /** When set to true, no data will be returned. */
        head?: boolean;
        /** Count algorithm to use to count rows in a table. */
        count?: 'exact' | 'planned' | 'estimated';
    }): PostgrestFilterBuilder<Function_['Returns'] extends any[] ? Function_['Returns'][number] extends Record<string, unknown> ? Function_['Returns'][number] : never : never, Function_['Returns']>;
}
//# sourceMappingURL=PostgrestClient.d.ts.map